1.The father and mother go together =2 minutes
2.The father goes back=1 minute
3.The son and daughter go together=5 minutes
4.The mother goes back=2 minutes
5.The father and mother go together =2 minutes 
Total=12 minutes

Maxtime= 12;
Maxpeople =2;
TotalTime=0
PeopleAtTheStart = 4;
dad 1
mother 2
son 4
daughter 5
timePerPerson[1, 2, 4, 5]
Sort the timePerPerson array
always add previous result
TimePerPair(timePerPerson[i], timePerPerson[k]):
	Return max(timePerPerson[i], timePerPerson[k]);
Step 1: 2 fastest going (1,2)
If 2 fastest writing, write the big one as output.----2
TotalTime = TotalTime + TimePerPair(timePerPerson[0], timePerPerson[1]);
PeopleAtTheStart = PeopleAtTheStart – 2;
Step 2: The fastest goes.
1	total=3
TotalTime = TotalTime + timePerPerson[0];
PeopleAtTheStart = PeopleAtTheStart + 1;
Step3: two slowest go.
 if we write the 2 slow ones, take the big one as output.5 total=8
TotalTime = TotalTime + TimePerPair(timePerPerson[2], timePerPerson[3]);
PeopleAtTheStart = PeopleAtTheStart – 2;

Step 4: The fastest is going back.
total=10
TotalTime = TotalTime + timePerPerson[1];
PeopleAtTheStart = PeopleAtTheStart + 1;

Step 5: two fastest go.
if we write 2 fast, take the big one as output. 2 total=12
TotalTime = TotalTime + TimePerPair(timePerPerson[0], timePerPerson[1]);
PeopleAtTheStart = PeopleAtTheStart – 2;
Check if all the requirements are met:
If ((TotalTime <= MaxTime) AND (PeopleAtTheStart == 0)):
	Print(“Success!”);
Else
	Print(“Try again!”)
